package com.example.takenogaku.helloworld;import android.app.Activity;import android.app.AlertDialog;import android.content.ContentValues;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.res.AssetFileDescriptor;import android.content.res.Resources;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Matrix;import android.net.Uri;import android.os.Bundle;import android.provider.MediaStore;import android.support.v7.app.AppCompatActivity;import android.util.DisplayMetrics;import android.view.Gravity;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.RadioButton;import android.widget.RadioGroup;import android.widget.Toast;import com.example.takenogaku.lib.CommonConstants;import com.example.takenogaku.lib.PersonOpenHelper;import com.example.takenogaku.lib.Util;import java.io.ByteArrayOutputStream;import java.io.FileNotFoundException;import java.io.IOException;import static android.util.Log.v;public class EditProfile extends AppCompatActivity {    private int dispWidth;    private Uri photoUri;    private int dispHeight;    private Button submitView;    private EditText nameView;    private EditText emailView;    private EditText addressView;    private EditText nationView;    private RadioGroup radioGroup;    private Bitmap bm_icon;    private SQLiteDatabase dbObj;    private View.OnClickListener submit_ClickListener = new View.OnClickListener(){        public void onClick(View v) {submit_Click(v);}};    private View.OnClickListener iconChg_ClickListener = new View.OnClickListener(){        public void onClick(View v) {            commonImageTrans(EditProfile.this);//            moveToEditAct();        }    };    private PersonOpenHelper dbHelper;//    private int id = 0;    private String name = "";    private int user_id = 0;    private byte[] user_icon;    private int sex;    private String email = "";    private String nation = "";    private String address ="";    private ImageView my_iconView;    private Resources resource;    private Util u;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_edit_profile);        //Dのヘルパークラスをオブジェクト化する        dbHelper = new PersonOpenHelper(this);        resource = getResources();        Intent i = getIntent();        user_id = i.getIntExtra("user_id",0);        v("user_id_check",user_id+"");        u = new Util();        //ビューをオブジェクト変数にセットする。        setViewObject();        //リスナー登録する。        setListner();        //DBからプロフィールデータを取得し、各項目データをグローバル変数に代入しておく。        setYourProfile();        //Dから取得したデータをビューに入れる。        deployProfileData();    }    /**     */    private void setViewObject () {        submitView = (Button)findViewById(R.id.submit_btn);        my_iconView  =  (ImageView)findViewById(R.id.edit_icon);        nameView = (EditText) findViewById(R.id.edit_name);        emailView = (EditText) findViewById(R.id.edit_email);        addressView = (EditText) findViewById(R.id.edit_address);        nationView = (EditText) findViewById(R.id.edit_nation);        radioGroup = (RadioGroup) findViewById(R.id.radioSex);    }    private  void setListner () {        submitView.setOnClickListener(submit_ClickListener);        my_iconView.setOnClickListener(iconChg_ClickListener);    }    private void deployProfileData () {        nameView.setText(name);        if (user_icon != null) {            Bitmap user_icon_bm= BitmapFactory.decodeByteArray(user_icon, 0, user_icon.length);            my_iconView.setImageBitmap(user_icon_bm);        }        if (sex == 1) {            radioGroup.check(R.id.RadioMan);        } else if (sex == 2) {            radioGroup.check(R.id.RadioWoman);        }        nationView.setText(nation);        emailView.setText(email);        addressView.setText(address);    }    /**     * alreadyRegistered     */    public void setYourProfile () {        dbObj = dbHelper.getReadableDatabase();        String sql = "SELECT id,name,icon_blob,sex,email,nation,address FROM profile_table where id = "+user_id;        Cursor c = dbObj.rawQuery(sql, null);        c.moveToFirst();        if (c.getCount() > 0) {//            id = c.getInt(0);            name = c.getString(1);            user_id = c.getInt(0);            user_icon = c.getBlob(2);            sex = c.getInt(3);            email = c.getString(4);            nation = c.getString(5);            address = c.getString(6);        }        c.close();        dbObj.close();    }    protected void commonImageTrans(Context con) {        final AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(                con);        CharSequence[] Addrdata;        Addrdata = new CharSequence[2];        Addrdata[0] = resource.getString(R.string.library);        Addrdata[1] = resource.getString(R.string.camera);        // タイトルを設定//        	alertDialogBuilder.setTitle("画像を変更します");        //alertDialogBuilder.setMessage("宛先は編集出来ます。");        // 表示項目とリスナの設定        alertDialogBuilder.setItems(Addrdata,                new android.content.DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface arg0, int position) {                        // TODO 自動生成されたメソッド・スタブ                        // * 画像ライブラリボタンのClick押下時                        // * 標準カメラアプリを起動する                        if (position == 0) {                            LibraryApp_Click();                        } else if (position == 1) {                            cameraApp_Click();                        }                    }                });        // ダイアログを表示        alertDialogBuilder.create().show();    }    /**     * submit     */    private void  submit_Click (View v) {        name = nameView.getText().toString();        email = emailView.getText().toString();        address = addressView.getText().toString();        nation = nationView.getText().toString();        if (validationCheck()) {            // チェックされているラジオボタンの ID を取得します            RadioButton checkedRadioButton = (RadioButton) findViewById(radioGroup.getCheckedRadioButtonId());             boolean checked = ((RadioButton) checkedRadioButton).isChecked();            int sex = 0;            if (checked) {                String sexId = (String) checkedRadioButton.getText();                if (sexId.equals("man")) {                    sex = 1;//man                } else if (sexId.equals("woman")) {                    sex = 2;//woman                }            }            ContentValues values = new ContentValues();            values.put("name", name+"");            values.put("email", email+"");            values.put("address", address+"");            values.put("nation", nation+"");            values.put("sex", sex + "");            if (bm_icon != null) {                byte[] bt = u.changeBitmapToByte(bm_icon);                values.put("icon_blob", bt);            }            long y = 0;            if (user_id > 0) {                y = updateDBCtr(values, CommonConstants.PROFILE_TABLE, "id", user_id);            } else {                y = insertDBCtr(values, CommonConstants.PROFILE_TABLE);            }            if (y > -1) {                registered();            }        }    }    /**     *     */    private void registered () {        Toast toast = Toast.makeText(getApplicationContext(), "プロフィールを登録しました。", Toast.LENGTH_LONG);        toast.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER, 0, 0);        toast.show();        Intent intent = new Intent(this, MainActivity.class);        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);        startActivity(intent);        finish();    }    /**     *     * @return res     */    private boolean validationCheck () {        boolean mailChecked = true;        boolean res = true;        if (!email.equals("")) {            mailChecked = android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches();        }        if (name.equals("")) {            Toast toast = Toast.makeText(getApplicationContext(), "名前がありません。", Toast.LENGTH_LONG);            toast.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER, 0, 0);            toast.show();            res = false;        } else if (address.equals("")){            Toast toast = Toast.makeText(getApplicationContext(), "住所がありません。", Toast.LENGTH_LONG);            toast.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER, 0, 0);            toast.show();            res = false;        } else if (!mailChecked) {            Toast toast = Toast.makeText(getApplicationContext(), "emailが正しく入力してください。", Toast.LENGTH_LONG);            toast.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER, 0, 0);            toast.show();            res = false;        }            return res;    }    /*    * 画像ライブラリボタンのClick押下時    */    private void LibraryApp_Click(){        // インテント設定        Intent intent = new Intent(Intent.ACTION_PICK);        // とりあえずストレージ内の全イメージ画像を対象        intent.setType("image/*");        intent.setAction(Intent.ACTION_GET_CONTENT);        // ギャラリー表示        startActivityForResult(intent, CommonConstants.REQUEST_PICK_LIB);    }    /*     * カメラボタンのClick押下時     */    private void cameraApp_Click(){        Bundle extras = getIntent().getExtras();        String filename = System.currentTimeMillis() + ".jpg";        ContentValues values = new ContentValues();        values.put(MediaStore.Images.Media.TITLE, filename);        values.put(MediaStore.Images.Media.MIME_TYPE, "image/jpeg");        photoUri = getContentResolver().insert(                MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);        Intent intent = new Intent();        intent.setAction(MediaStore.ACTION_IMAGE_CAPTURE);        intent.putExtra(MediaStore.EXTRA_OUTPUT, photoUri);//        setResult(RESULT_OK, intent);        startActivityForResult(intent, CommonConstants.REQUEST_PICK_CAM);    }    @Override    public void onActivityResult(int requestCode, int resultCode, Intent data) {        //撮影した写真を反映させる        if (resultCode == Activity.RESULT_OK) {            //ライブラリから取得した写真を反映させる            if (requestCode == CommonConstants.REQUEST_PICK_LIB) {                if(data != null && data.getData() != null){                    int image_size_normal = Util.changePxtoPd(this, CommonConstants.IMAGE_SIZE_NORMAL);                    bm_icon = loadBitmap(data.getData(), image_size_normal,image_size_normal);                    my_iconView.setImageBitmap(bm_icon);                    setBitmapBlob(bm_icon);                } else {                    if (data == null) {                        v("test_rr", "error!333");                    } else {                        v("test_rr", "error11");                    }                }                            } else if (requestCode == CommonConstants.REQUEST_PICK_CAM) {                int image_size_normal = Util.changePxtoPd(this, CommonConstants.IMAGE_SIZE_NORMAL);                bm_icon= loadBitmap(photoUri, image_size_normal, image_size_normal);                bm_icon = u.RotateImg(bm_icon,90);                setBitmapBlob(bm_icon);                my_iconView.setImageBitmap(bm_icon);            }        }    }    private void setBitmapBlob (Bitmap bm_p) {        try {            ByteArrayOutputStream baoStream = new ByteArrayOutputStream();            bm_p.compress(Bitmap.CompressFormat.JPEG, 90, baoStream);            baoStream.flush();            byte[] _bArray = baoStream.toByteArray();            baoStream.close();            ContentValues values = new ContentValues();            values.put("icon_blob", _bArray);            if (_bArray != null) {                long y = updateDBCtr(values, CommonConstants.PROFILE_TABLE, "id", user_id);            }        } catch (IOException e) {            e.printStackTrace();        }    }    /**     * @param uri     * @param viewWidth     * @param viewHeight     * @return     */    protected Bitmap loadBitmap(Uri uri, int viewWidth, int viewHeight) {        try {            // Uriから画像を読み込みBitmapを作成            Bitmap originalBitmap = null;            BitmapFactory.Options options = new BitmapFactory.Options();            options.inSampleSize = 3;            // ARGBでそれぞれ0～127段階の色を使用（メモリ対策）//        options.inPreferredConfig = Config.ARGB_4444;            // システムメモリ上に再利用性の無いオブジェクトがある場合に勝手に解放（メモリ対策）            options.inPurgeable = true;            // 現在の表示メトリクスの取得            DisplayMetrics dm = this.getResources().getDisplayMetrics();            // ビットマップのサイズを現在の表示メトリクスに合わせる（メモリ対策）            options.inDensity = dm.densityDpi;            AssetFileDescriptor fileDescriptor =null;            try {                fileDescriptor = getContentResolver().openAssetFileDescriptor( uri, "r");            } catch (FileNotFoundException e) {                // TODO 自動生成された catch ブロック                e.printStackTrace();            }            originalBitmap                    = BitmapFactory.decodeFileDescriptor(                    fileDescriptor.getFileDescriptor(), null, options);            BitmapFactory.Options imageOptions;            imageOptions = new BitmapFactory.Options();            // MediaStoreから回転情報を取得            final int orientation;            Cursor cursor = MediaStore.Images.Media.query(getContentResolver(), uri, new String[] {                    MediaStore.Images.ImageColumns.ORIENTATION            });            if (cursor != null) {                cursor.moveToFirst();                orientation = cursor.getInt(0);            } else {                orientation = 0;            }            final int originalWidth = originalBitmap.getWidth();            final int originalHeight = originalBitmap.getHeight();            // 縮小割合を計算            final float scale;            if (orientation == 90 || orientation == 270) {                scale = Math.min((float)viewWidth / originalHeight, (float)viewHeight / originalWidth);            } else {                scale = Math.min((float)viewWidth / originalWidth, (float)viewHeight / originalHeight);            }            // 変換行列の作成            final Matrix matrix = new Matrix();            if (orientation != 0) {                matrix.postRotate(orientation);            }            if (scale < 1.0f) {                matrix.postScale(scale, scale);            }            Bitmap newbm = Bitmap.createBitmap(originalBitmap, 0, 0, originalWidth, originalHeight, matrix,true);            originalBitmap = null;            // 行列によって変換されたBitmapを返す            return newbm;        } catch( OutOfMemoryError e ) {            return null;        }    }    /**     * insertDBCtr     * @param values     * @param table     * @return     */    public long insertDBCtr (ContentValues values,String table) {        SQLiteDatabase db = dbHelper.getWritableDatabase();        long ret;        try {            ret = db.insert(table, null, values);        } finally {            db.close();        }        return ret;    }    /**     * db control     * @param values     * @param table     * @return     */    public long updateDBCtr (ContentValues values,String table,String key,int id) {        long ret = 0;        SQLiteDatabase db = dbHelper.getWritableDatabase();        try {            ret = db.update(table, values, key + " = " + id, null);        } finally {            db.close();        }        return ret;    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        // Inflate the menu; this adds items to the action bar if it is present.        getMenuInflater().inflate(R.menu.menu_edit_profile, menu);        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        // Handle action bar item clicks here. The action bar will        // automatically handle clicks on the Home/Up button, so long        // as you specify a parent activity in AndroidManifest.xml.        int id = item.getItemId();        //noinspection SimplifiableIfStatement        if (id == R.id.action_settings) {            return true;        }        return super.onOptionsItemSelected(item);    }}